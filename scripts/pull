#!/usr/bin/env node

const fs = require('fs').promises
const path = require('path')
const youtube = require('./youtube').asApi()

const playlistId = 'UUzpErreSO-Fv2oY5t-YXvRw'
const videoDirectory = path.join(__dirname, '../videos')

const existing = {}

async function populateExisting () {
  const entries = await fs.readdir(videoDirectory)

  for (const path of entries) {
    const id = path.split(' - ')[1]
    existing[id] = path
  }
}

async function dumpVideo (snippet) {
  const date = snippet.publishedAt.split('T')[0].replaceAll('-', '')
  const id = snippet.resourceId.videoId
  const title = snippet.title.replaceAll(/: ?/g, ' - ')
  const file = `${date} - ${id} - ${title}.description`

  console.log(file)

  const fullPath = path.join(videoDirectory, file)

  if (existing[id]) {
    await fs.rename(path.join(videoDirectory, existing[id]), fullPath)
  }

  await fs.writeFile(fullPath, snippet.description + '\n')
}

async function main () {
  await populateExisting()

  // Ignore videos older than this.
  const dateAfter = new Date('2018-01-01')

  let pageToken

  pagination:
  while (true) {
    const { data: uploads } = await youtube.call('playlistItems', 'list', {
      playlistId,
      part: 'snippet',
      maxResults: 50,
      pageToken
    })

    for (const item of uploads.items) {
      if (new Date(item.snippet.publishedAt).getTime() < dateAfter) {
        break pagination
      }

      await dumpVideo(item.snippet)
    }

    if (!uploads.nextPageToken) {
      break
    }

    pageToken = uploads.nextPageToken
  }
}

main()
  .catch(err => {
    console.error(err.stack || err)
    process.exit(1)
  })
